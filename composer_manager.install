<?php

/**
 * @file
 * Install, update, and uninstall functions for the Composer Manager module.
 */

/**
 * Implements hook_uninstall().
 */
function composer_manager_uninstall() {
  variable_del('composer_manager_vendor_dir');
  variable_del('composer_manager_autobuild_file');
  variable_del('composer_manager_file_dir');
}

/**
 * Change the name of the "composer_manager_generate_file" variable to
 * "composer_manager_autobuild_file".
 */
function composer_manager_update_7100() {
  $autobuild = variable_get('composer_manager_generate_file', 1);
  variable_set('composer_manager_autobuild_file', $autobuild);
  variable_del('composer_manager_generate_file');
}

/**
 * Implements hook_requirements().
 */
function composer_manager_requirements($phase) {
  if ('runtime' != $phase) {
    return;
  }

  $t = get_t();

  $dir_uri = variable_get('composer_manager_file_dir', file_default_scheme() . '://composer');
  $composer_file = $dir_uri . '/composer.json';

  $vendor_dir = composer_manager_vendor_dir();
  $autoload_file = $vendor_dir . '/autoload.php';

  $requirements = array(
    'composer_manager' => array(
      'title' => $t('Composer Manager'),
    ),
  );

  if (!file_exists($composer_file)) {
    $requirements['composer_manager']['description'] = $t('Composer Manager combines each module\'s composer.json file into a consolidated file. Visit <a href="@url">admin/config/system/composer-manager/settings</a> or execute <code>drush composer-json-rebuild</code> on the command line to build the file.', array('@url' => url('admin/config/system/composer-manager')));
    $requirements['composer_manager']['value'] = $t('Missing composer.json file');
    $requirements['composer_manager']['severity'] = REQUIREMENT_ERROR;
  }
  elseif (!json_decode(@file_get_contents($composer_file))) {
    $requirements['composer_manager']['description'] = $t('The composer.json file is invalid. Visit <a href="@url">admin/config/system/composer-manager/settings</a> or execute <code>drush composer-json-rebuild</code> on the command line to rebuild the file.', array('@url' => url('admin/config/system/composer-manager')));
    $requirements['composer_manager']['value'] = $t('Invalid composer.json file');
    $requirements['composer_manager']['severity'] = REQUIREMENT_ERROR;
  }
  elseif (!file_exists($autoload_file)) {
    $requirements['composer_manager']['description'] = $t('The autoloader generated by Composer was not found, which usually means that the third-party packages are not installed. Refer to the instructions on the <a href="@url">Composer Manager project page</a> for installing and updating packages.', array('@url' => url('http://drupal.org/project/composer_manager', array('absolute' => TRUE))));
    $requirements['composer_manager']['value'] = $t('Packages not installed');
    $requirements['composer_manager']['severity'] = REQUIREMENT_ERROR;
  }
  else {
    $requirements['composer_manager']['value'] = $t('Packages installed');
    $requirements['composer_manager']['severity'] = REQUIREMENT_OK;
  }

  return $requirements;
}
